import { distinctUntilChanged, filter, map, withLatestFrom } from 'rxjs/operators';
import { getRelativeMousePosition, hasMinimumSize } from './utils';
export const createSelectBox = (container) => {
    return (source) => {
        return source.pipe(map(([event, opacity, { x, y }]) => {
            // Type annotation is required here, because `getRelativeMousePosition` returns a `MousePosition`,
            // the TS compiler cannot figure out the shape of this type.
            const mousePosition = getRelativeMousePosition(event, container);
            const width = opacity > 0 ? mousePosition.x - x : 0;
            const height = opacity > 0 ? mousePosition.y - y : 0;
            return {
                top: height < 0 ? mousePosition.y : y,
                left: width < 0 ? mousePosition.x : x,
                width: Math.abs(width),
                height: Math.abs(height),
                opacity,
            };
        }));
    };
};
export const whenSelectBoxVisible = (selectBox$) => (source) => source.pipe(withLatestFrom(selectBox$), filter(([, selectBox]) => hasMinimumSize(selectBox, 0, 0)), map(([event, _]) => event));
export const distinctKeyEvents = () => (source) => source.pipe(distinctUntilChanged((prev, curr) => {
    return prev && curr && prev.code === curr.code;
}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3BlcmF0b3JzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LWRyYWctdG8tc2VsZWN0L3NyYy9saWIvb3BlcmF0b3JzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLGNBQWMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRW5GLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxjQUFjLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFFbkUsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQUMsU0FBOEIsRUFBRSxFQUFFO0lBQ2hFLE9BQU8sQ0FBQyxNQUFrQyxFQUFpQyxFQUFFO1FBQzNFLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FDaEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNqQyxrR0FBa0c7WUFDbEcsNERBQTREO1lBQzVELE1BQU0sYUFBYSxHQUFrQix3QkFBd0IsQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLENBQUM7WUFFaEYsTUFBTSxLQUFLLEdBQUcsT0FBTyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNwRCxNQUFNLE1BQU0sR0FBRyxPQUFPLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRXJELE9BQU87Z0JBQ0wsR0FBRyxFQUFFLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3JDLElBQUksRUFBRSxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNyQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUM7Z0JBQ3RCLE1BQU0sRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQztnQkFDeEIsT0FBTzthQUNSLENBQUM7UUFDSixDQUFDLENBQUMsQ0FDSCxDQUFDO0lBQ0osQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sb0JBQW9CLEdBQUcsQ0FBQyxVQUF5QyxFQUFFLEVBQUUsQ0FBQyxDQUFDLE1BQXlCLEVBQUUsRUFBRSxDQUMvRyxNQUFNLENBQUMsSUFBSSxDQUNULGNBQWMsQ0FBQyxVQUFVLENBQUMsRUFDMUIsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxjQUFjLENBQUMsU0FBUyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUMxRCxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQzNCLENBQUM7QUFFSixNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLE1BQWlDLEVBQUUsRUFBRSxDQUMzRSxNQUFNLENBQUMsSUFBSSxDQUNULG9CQUFvQixDQUFDLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxFQUFFO0lBQ2xDLE9BQU8sSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUM7QUFDakQsQ0FBQyxDQUFDLENBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgZGlzdGluY3RVbnRpbENoYW5nZWQsIGZpbHRlciwgbWFwLCB3aXRoTGF0ZXN0RnJvbSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgTW91c2VQb3NpdGlvbiwgU2VsZWN0Qm94LCBTZWxlY3RCb3hJbnB1dCwgU2VsZWN0Q29udGFpbmVySG9zdCB9IGZyb20gJy4vbW9kZWxzJztcclxuaW1wb3J0IHsgZ2V0UmVsYXRpdmVNb3VzZVBvc2l0aW9uLCBoYXNNaW5pbXVtU2l6ZSB9IGZyb20gJy4vdXRpbHMnO1xyXG5cclxuZXhwb3J0IGNvbnN0IGNyZWF0ZVNlbGVjdEJveCA9IChjb250YWluZXI6IFNlbGVjdENvbnRhaW5lckhvc3QpID0+IHtcclxuICByZXR1cm4gKHNvdXJjZTogT2JzZXJ2YWJsZTxTZWxlY3RCb3hJbnB1dD4pOiBPYnNlcnZhYmxlPFNlbGVjdEJveDxudW1iZXI+PiA9PiB7XHJcbiAgICByZXR1cm4gc291cmNlLnBpcGUoXHJcbiAgICAgIG1hcCgoW2V2ZW50LCBvcGFjaXR5LCB7IHgsIHkgfV0pID0+IHtcclxuICAgICAgICAvLyBUeXBlIGFubm90YXRpb24gaXMgcmVxdWlyZWQgaGVyZSwgYmVjYXVzZSBgZ2V0UmVsYXRpdmVNb3VzZVBvc2l0aW9uYCByZXR1cm5zIGEgYE1vdXNlUG9zaXRpb25gLFxyXG4gICAgICAgIC8vIHRoZSBUUyBjb21waWxlciBjYW5ub3QgZmlndXJlIG91dCB0aGUgc2hhcGUgb2YgdGhpcyB0eXBlLlxyXG4gICAgICAgIGNvbnN0IG1vdXNlUG9zaXRpb246IE1vdXNlUG9zaXRpb24gPSBnZXRSZWxhdGl2ZU1vdXNlUG9zaXRpb24oZXZlbnQsIGNvbnRhaW5lcik7XHJcblxyXG4gICAgICAgIGNvbnN0IHdpZHRoID0gb3BhY2l0eSA+IDAgPyBtb3VzZVBvc2l0aW9uLnggLSB4IDogMDtcclxuICAgICAgICBjb25zdCBoZWlnaHQgPSBvcGFjaXR5ID4gMCA/IG1vdXNlUG9zaXRpb24ueSAtIHkgOiAwO1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgdG9wOiBoZWlnaHQgPCAwID8gbW91c2VQb3NpdGlvbi55IDogeSxcclxuICAgICAgICAgIGxlZnQ6IHdpZHRoIDwgMCA/IG1vdXNlUG9zaXRpb24ueCA6IHgsXHJcbiAgICAgICAgICB3aWR0aDogTWF0aC5hYnMod2lkdGgpLFxyXG4gICAgICAgICAgaGVpZ2h0OiBNYXRoLmFicyhoZWlnaHQpLFxyXG4gICAgICAgICAgb3BhY2l0eSxcclxuICAgICAgICB9O1xyXG4gICAgICB9KVxyXG4gICAgKTtcclxuICB9O1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IHdoZW5TZWxlY3RCb3hWaXNpYmxlID0gKHNlbGVjdEJveCQ6IE9ic2VydmFibGU8U2VsZWN0Qm94PG51bWJlcj4+KSA9PiAoc291cmNlOiBPYnNlcnZhYmxlPEV2ZW50PikgPT5cclxuICBzb3VyY2UucGlwZShcclxuICAgIHdpdGhMYXRlc3RGcm9tKHNlbGVjdEJveCQpLFxyXG4gICAgZmlsdGVyKChbLCBzZWxlY3RCb3hdKSA9PiBoYXNNaW5pbXVtU2l6ZShzZWxlY3RCb3gsIDAsIDApKSxcclxuICAgIG1hcCgoW2V2ZW50LCBfXSkgPT4gZXZlbnQpXHJcbiAgKTtcclxuXHJcbmV4cG9ydCBjb25zdCBkaXN0aW5jdEtleUV2ZW50cyA9ICgpID0+IChzb3VyY2U6IE9ic2VydmFibGU8S2V5Ym9hcmRFdmVudD4pID0+XHJcbiAgc291cmNlLnBpcGUoXHJcbiAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCgocHJldiwgY3VycikgPT4ge1xyXG4gICAgICByZXR1cm4gcHJldiAmJiBjdXJyICYmIHByZXYuY29kZSA9PT0gY3Vyci5jb2RlO1xyXG4gICAgfSlcclxuICApO1xyXG4iXX0=